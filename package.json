{
  "name": "advancedprofanityfilter",
  "version": "3.2.3",
  "description": "A browser extension to filter profanity from webpages.",
  "node": "^12.20.0 || ^14.13.1 || >=16.0.0",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/FrostCo/AdvancedProfanityFilter.git"
  },
  "keywords": [
    "Profanity",
    "Filter"
  ],
  "author": "Richard Frost",
  "license": "SEE LICENSE IN LICENSE",
  "bugs": {
    "url": "https://github.com/FrostCo/AdvancedProfanityFilter/issues"
  },
  "homepage": "https://github.com/FrostCo/AdvancedProfanityFilter#readme",
  "scripts": {
    "build:chrome:mv2": "npm run build --target=chrome-mv2",
    "build:chrome:mv3": "npm run build --target=chrome-mv3",
    "build:chrome": "npm run build:chrome:mv3",
    "build:edgeLegacy": "npm run build --target=edgeLegacy-mv2",
    "build:firefox": "npm run build:firefox:mv2",
    "build:firefox:mv2": "npm run build --target=firefox-mv2",
    "build:firefox:mv3": "npm run build --target=firefox-mv3",
    "build:libs": "tsc -p ./src/script/lib/tsconfig.json",
    "build:static": "node bin/copyStatic.mjs",
    "build:test": "tsc -p tsconfig.test.json",
    "build": "webpack --config bin/webpack.dev.js && npm run build:static",
    "clean:build": "node bin/clean.mjs --build",
    "clean:dist": "node bin/clean.mjs --dist",
    "clean": "node bin/clean.mjs --all",
    "package": "node bin/packageExtension.mjs",
    "postbuild": "node bin/postbuild.mjs",
    "postrelease:all": "npm run build",
    "postrelease:build": "node bin/postbuild.mjs",
    "postrelease:firefox:mv2": "node bin/packageSource.mjs",
    "prebuild": "npm run clean:build && node bin/prebuild.mjs --$npm_config_target",
    "prerelease:all": "npm run clean && npm run release:bookmarklet",
    "prerelease:build": "npm run clean:build && node bin/prebuild.mjs --release --$npm_config_target",
    "release:all": "npm run release:chrome:mv2 && npm run release:chrome:mv3 && npm run release:edgeLegacy && npm run release:firefox:mv2 && npm run release:firefox:mv3",
    "release:bookmarklet": "node bin/prebuild.mjs --release --bookmarklet && webpack --config bin/webpack.bookmarklet.js",
    "release:build": "webpack --config bin/webpack.prod.js && npm run build:static",
    "release:chrome:mv2": "npm run release:build --target=chrome-mv2 && npm run package",
    "release:chrome:mv3": "npm run release:build --target=chrome-mv3 && npm run package",
    "release:chrome": "npm run release:chrome:mv3",
    "release:edgeLegacy": "npm run release:build --target=edgeLegacy-mv2 && npm run package",
    "release:firefox:mv2": "npm run release:build --target=firefox-mv2 && npm run package",
    "release:firefox:mv3": "npm run release:build --target=firefox-mv3 && npm run package",
    "release:firefox": "npm run release:firefox:mv2",
    "release": "npm run release:build",
    "test:addon": "npm run release:build --target=firefox-mv2 && npx addons-linter ./dist",
    "test:all": "npm run test && npm run test:lint:tests",
    "test:cov": "nyc --reporter=lcov --reporter=text npm run test:nocov",
    "test:debug": "node --inspect-brk node_modules/ts-mocha/bin/ts-mocha -p tsconfig.test.json --paths --reporter tap",
    "test:lint:all": "npm run test:lint && npm run test:lint:bin && npm run test:lint:tests",
    "test:lint:bin": "eslint \"bin/**/*.*js\"",
    "test:lint:nibble": "npx eslint-nibble \"src/**/*.ts\"",
    "test:lint:tests": "eslint \"test/spec/*.spec.ts\"",
    "test:lint": "eslint \"src/**/*.ts\"",
    "test:nocov": "ts-mocha -p tsconfig.test.json --paths",
    "test:types:tests": "tsc --noEmit -p test/tsconfig.json",
    "test:types": "tsc --noEmit",
    "test": "npm run test:lint && npm run test:types && npm run test:addon && npm run test:cov",
    "type-check:watch": "npm run type-check -- --watch",
    "update:deps": "npx npm-check-updates --concurrency 10 --timeout 600000 --upgrade",
    "update:help": "node bin/updateHelp.mjs",
    "watch": "node bin/watch.js"
  },
  "devDependencies": {
    "@types/chrome": "^0.0.208",
    "@types/mocha": "^10.0.1",
    "@typescript-eslint/eslint-plugin": "^5.48.1",
    "@typescript-eslint/parser": "^5.48.1",
    "addons-linter": "^5.26.0",
    "adm-zip": "^0.5.10",
    "chai": "^4.3.7",
    "chokidar": "^3.5.3",
    "download": "^8.0.0",
    "eslint": "^8.31.0",
    "fs-extra": "^11.1.0",
    "globby": "^13.1.3",
    "marked": "^4.2.5",
    "mocha": "^10.2.0",
    "npm-check-updates": "^16.6.2",
    "nyc": "^15.1.0",
    "terser-webpack-plugin": "^5.3.6",
    "ts-loader": "^9.4.2",
    "ts-mocha": "^10.0.0",
    "tsconfig-paths": "^4.1.2",
    "tsconfig-paths-webpack-plugin": "^4.0.0",
    "typescript": "^4.9.4",
    "webpack": "^5.75.0",
    "webpack-cli": "^5.0.1"
  },
  "eslintConfig": {
    "extends": [
      "eslint:recommended",
      "plugin:@typescript-eslint/recommended"
    ],
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
      "ecmaVersion": 6,
      "sourceType": "module",
      "ecmaFeatures": {}
    },
    "plugins": [
      "@typescript-eslint"
    ],
    "rules": {
      "array-bracket-spacing": [
        "warn",
        "never"
      ],
      "arrow-parens": [
        "warn",
        "always"
      ],
      "comma-spacing": "warn",
      "eol-last": "error",
      "indent": [
        "warn",
        2,
        {
          "SwitchCase": 1
        }
      ],
      "keyword-spacing": "warn",
      "no-console": "warn",
      "no-control-regex": [
        "off"
      ],
      "no-prototype-builtins": "off",
      "no-shadow": "warn",
      "no-undef": [
        "off"
      ],
      "no-unused-vars": [
        "off"
      ],
      "no-useless-escape": [
        "off"
      ],
      "object-curly-spacing": [
        "warn",
        "always"
      ],
      "prefer-const": [
        "error",
        {
          "destructuring": "all"
        }
      ],
      "quotes": [
        "error",
        "single",
        "avoid-escape"
      ],
      "semi": [
        "error",
        "always"
      ],
      "@typescript-eslint/ban-ts-comment": [
        "warn",
        {
          "ts-ignore": "allow-with-description"
        }
      ],
      "@typescript-eslint/explicit-function-return-type": "off",
      "@typescript-eslint/explicit-member-accessibility": "off",
      "@typescript-eslint/explicit-module-boundary-types": "off",
      "@typescript-eslint/naming-convention": [
        "error",
        {
          "selector": "accessor",
          "format": [
            "camelCase",
            "PascalCase"
          ],
          "leadingUnderscore": "allow",
          "trailingUnderscore": "forbid"
        },
        {
          "selector": "class",
          "format": [
            "PascalCase"
          ],
          "leadingUnderscore": "allow",
          "trailingUnderscore": "allow"
        },
        {
          "selector": "classProperty",
          "modifiers": [
            "static",
            "readonly"
          ],
          "format": [
            "camelCase",
            "UPPER_CASE"
          ],
          "leadingUnderscore": "allow",
          "trailingUnderscore": "allow"
        },
        {
          "selector": "interface",
          "format": [
            "PascalCase"
          ],
          "leadingUnderscore": "forbid",
          "trailingUnderscore": "forbid"
        },
        {
          "selector": "variable",
          "format": [
            "camelCase",
            "UPPER_CASE"
          ],
          "leadingUnderscore": "allow",
          "trailingUnderscore": "allow"
        },
        {
          "selector": "default",
          "format": [
            "camelCase"
          ],
          "leadingUnderscore": "allow",
          "trailingUnderscore": "allow"
        }
      ],
      "@typescript-eslint/no-empty-function": "off",
      "@typescript-eslint/no-explicit-any": "off",
      "@typescript-eslint/no-inferrable-types": "off",
      "@typescript-eslint/no-unused-vars": [
        "error",
        {
          "vars": "all",
          "args": "none"
        }
      ],
      "@typescript-eslint/no-use-before-define": "off",
      "@typescript-eslint/type-annotation-spacing": "error"
    }
  },
  "mocha": {
    "reporter": "dot",
    "spec": [
      "test/spec/**/*.spec.ts"
    ]
  },
  "nyc": {
    "extension": [
      ".ts"
    ],
    "include": [
      "src/script/**/*.ts"
    ],
    "report-dir": "test/coverage",
    "temp-dir": "./test/.nyc_output"
  }
}
