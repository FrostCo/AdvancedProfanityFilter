{
  "bookmarkletsPage": {
    "buttons": {
      "installBookmarklet": "$t(common:app.shortName)"
    },
    "headers": {
      "bookmarklet": "$t(options:tabs.bookmarklet)"
    },
    "labels": {
      "useDefaultConfig": "Use default config",
      "useMyConfig": "Use my config"
    },
    "notes": {
      "explanation": "Create a 'bookmarklet' of Advanced Profanity Filter that can be used when you can't install the extension",
      "installBookmarklet": "Drag to your bookmarks bar or copy the URL",
      "learnMore": "learn more"
    }
  },
  "bulkWordEditorModal": {
    "buttons": {
      "addWord": "ADD WORD",
      "addWords": "BULK ADD WORDS",
      "cancel": "$t(common:buttons.cancel)",
      "save": "$t(common:buttons.save)"
    },
    "headers": {
      "bulkWordEditor": "Bulk Word Editor"
    },
    "messages": {
      "confirmSave": "Are you sure you want to save these changes?",
      "confirmSaveNote": "Make sure you have a backup first!",
      "confirmSaveRetryStorage": "Failed to save changes because they were too large to be stored. Retry using local storage?",
      "saveFailed": "$t(options:modals.messages.saveFailed)",
      "saveSuccess": "Words saved successfully."
    },
    "notes": {
      "bulkAddWordsPlaceholder": "Bulk add words (one word/phrase per line)"
    },
    "tableHeaders": {
      "matchMethod": "Match Method",
      "remove": "Remove",
      "repeated": "Repeated",
      "separators": "Separators",
      "substitution": "Substitution",
      "substitutionCase": "Substitution Case",
      "word": "Word"
    }
  },
  "configsPage": {
    "buttons": {
      "exportConfig": "$t(common:buttons.export)",
      "importConfig": "$t(common:buttons.import)",
      "removePassword": "$t(common:buttons.remove)",
      "restoreDefaultConfig": "$t(common:buttons.restoreDefaults)",
      "setPassword": "$t(common:buttons.set)"
    },
    "headers": {
      "configuration": "Configuration",
      "loggingLevel": "Logging Level",
      "password": "Password",
      "storage": "Storage"
    },
    "labels": {
      "inlineEditor": "Inline editor",
      "syncLargeSettings": "Sync large settings"
    },
    "messages": {
      "convertStorageCleanupFailed": "Failed to cleanup old storage, backup automatically exported.",
      "convertStorageFailed": "Failed to update storage preference.",
      "convertStorageSuccess": "Storage converted successfully.",
      "importFailed": "Failed to import config.",
      "importProcessingFailed": "Failed to process new settings.",
      "importSuccess": "Settings imported successfully.",
      "restoreDefaultsFailed": "Failed to restore defaults.",
      "restoreDefaultsSuccess": "Default settings restored.",
      "updatePasswordFailed": "Failed to update password."
    },
    "notes": {
      "syncLargeSettings": "Words, domains, etc. Disable if you run out of space"
    },
    "options": {
      "debugLogLevel": "$t(common:logLevels.debug)",
      "errorLogLevel": "$t(common:logLevels.error)",
      "infoLogLevel": "$t(common:logLevels.info)",
      "warnLogLevel": "$t(common:logLevels.warn)"
    }
  },
  "confirmModal": {
    "buttons": {
      "backup": "$t(common:buttons.backup)",
      "cancel": "$t(common:buttons.cancel)",
      "ok": "$t(common:buttons.ok)"
    },
    "headers": {
      "default": "Please Confirm"
    },
    "messages": {
      "convertStorageToLocal": "This will prevent large settings like words and domains from syncing, but allow you to store more.",
      "convertStorageToSync": "This will allow large settings like words and domains to sync, but has stricter limits on how much you can store.",
      "default": "Are you sure?",
      "importConfig": "Are you sure you want to overwrite your existing settings?",
      "importConfigRetry": "Import failed due to storage limitations. Would you like to try again using local storage?",
      "removeAllWords": "Are you sure you want to remove all words?",
      "removePassword": "Are you sure you want to remove the password?",
      "restoreDefaults": "Are you sure you want to restore defaults?",
      "setPassword": "Are you sure you want to set the password to '{{password}}'?"
    },
    "notes": {
      "convertStorage": "Make sure you have a backup first!",
      "convertStorageToLocal": "Local storage can store more, but things like words and domains will no longer sync between devices."
    }
  },
  "domainsPage": {
    "buttons": {
      "removeDomain": "$t(common:buttons.remove)",
      "saveDomain": "$t(common:buttons.save)"
    },
    "headers": {
      "domain": "Domain",
      "domains": "$t(options:tabs.domains)",
      "frameMode": "Frame Mode",
      "matchMode": "Domain Match Mode",
      "mode": "Mode",
      "textWordlist": "Text Wordlist"
    },
    "labels": {
      "filterAllFrames": "Filter all frames",
      "filterDisabled": "Filter disabled",
      "filterEnabled": "Filter enabled",
      "framesDisabled": "Frames disabled",
      "framesEnabled": "Frames enabled"
    },
    "messages": {
      "removeFailed": "Failed to remove domain '{{ domain }}'.",
      "saveFailedGettingSettings": "Failed to gather domain settings."
    },
    "notes": {
      "domainEnabled": "Filter pages on this domain",
      "domainExample": "Example: 'google.com' or 'mail.google.com'",
      "filterAllFrames": "Filter frames on all domains",
      "filterDisabled": "Don't filter pages on this domain",
      "framesDisabled": "Disable filtering frames on this domain",
      "framesEnabled": "Filter frames on this domain",
      "matchModeMinimal": "Only filter enabled domains",
      "matchModeNormal": "Filter all domains"
    },
    "options": {
      "advancedDomainMode": "$t(common:domainModes.advanced)",
      "allWordsWordlist": "$t(common:wordlists.allWords)",
      "deepDomainMode": "$t(common:domainModes.deep)",
      "defaultWordlist": "$t(common:wordlists.default)",
      "minimalDomainMatchMode": "$t(common:domainMatchModes.minimal)",
      "normalDomainMatchMode": "$t(common:domainMatchModes.normal)",
      "normalDomainMode": "$t(common:domainModes.normal)"
    },
    "validations": {
      "domainExample": "Valid domain example: google.com or www.google.com",
      "emptyInputError": "Please enter a value."
    }
  },
  "headers": {
    "title": "$t(common:app.name)"
  },
  "listsPage": {
    "buttons": {
      "removeWordFromList": "$t(common:buttons.remove)",
      "renameWordlist": "$t(common:buttons.rename)",
      "saveWordToList": "$t(common:buttons.save)"
    },
    "headers": {
      "allowlist": "Allowlist",
      "defaultTextWordlist": "Default Text Wordlist",
      "wordlistName": "Name",
      "wordlists": "$t(common:wordlists.plural)",
      "wordPhrase": "Word/Phrase"
    },
    "labels": {
      "caseInsensitive": "Case-insensitive",
      "caseSensitive": "Case-sensitive"
    },
    "messages": {
      "removeWordFromAllowlistFailed": "Failed to remove '{{word}}' from allowlist.",
      "renameWordlistFailed": "Failed to save wordlist name.",
      "saveAllowlistFailed": "Failed to update allowlist.",
      "saveDefaultWordlistFailed": "Failed to update default wordlist."
    },
    "notes": {
      "allowlistCaseSensitive": "(* Case-sensitive)",
      "caseInsensitive": "(doghouse: Don't filter 'DogHouse')",
      "caseSensitive": "(Doghouse: Don't filter 'Doghouse')"
    },
    "options": {
      "allWordsWordlist": "$t(common:wordlists.allWords)"
    },
    "validations": {
      "wordAlreadyAllowed": "Already allowlisted.",
      "wordlistNameInvalid": "Please enter a valid name.",
      "wordlistNameNotUnique": "Please enter a unique name."
    }
  },
  "passwordModal": {
    "buttons": {
      "submitPassword": "$t(common:buttons.submit)"
    },
    "headers": {
      "enterPassword": "Enter Password"
    }
  },
  "settingsPage": {
    "headers": {
      "censorSettings": "Censor Settings",
      "defaultSettings": "Default Settings (for new words/phrases)",
      "filterMethod": "Filter Method",
      "generalSettings": "General Settings",
      "substitutionSettings": "Substitution Settings"
    },
    "labels": {
      "censorCharacter": "Censor character:",
      "censorFixedLength": "Fixed length:",
      "censorPreserveFirst": "Preserve the first letter",
      "censorPreserveLast": "Preserve the last letter",
      "defaultSubstitution": "Default Substitution",
      "defaultWordMatchMethod": "Match Method",
      "defaultWordMatchRepeated": "Match repeated characters",
      "defaultWordMatchSeparators": "Match separator characters",
      "showContextMenu": "Show context menu",
      "showCounter": "Show number of filtered words",
      "showSummary": "Show summary of filtered words",
      "showUpdateNotification": "Show update notification",
      "substitutionMark": "Mark substituted words with [ ]",
      "substitutionPreserveCase": "Preserve case of filtered words",
      "useDeviceTheme": "Use device theme"
    },
    "messages": {
      "saveFilterMethodFailed": "Failed to set filter method.",
      "saveThemeFailed": "Failed to update theme selection."
    },
    "notes": {
      "censorPreserveFirst": "(dog: dog = d**)",
      "censorPreserveLast": "(dog: dog = **g)",
      "defaultWordMatchRepeated": "(dog: dddoooggg)",
      "defaultWordMatchSeparators": "([-_ ] dog matches: D-o _g)",
      "filterMethodCensor": "(dog: dog = d**)",
      "filterMethodOff": "(disabled/summary only)",
      "filterMethodRemove": "(dog: doghouse = house)",
      "filterMethodSubstitute": "(dog > cat: dog = cat)",
      "showContextMenu": "(Right-click menu)",
      "showCounter": "(Shown over the extension icon)",
      "showSummary": "(Shown in the extension popup)",
      "substitutionMark": "(dog: dog = [cat])",
      "substitutionPreserveCase": "(dog: Dog = Cat)",
      "useDeviceTheme": "(Light/dark mode)"
    },
    "options": {
      "censorFilterMethod": "$t(common:filterMethods.censor)",
      "exactMatchMethod": "$t(common:wordMatchMethods.exact)",
      "offFilterMethod": "$t(common:filterMethods.off)",
      "partialMatchMethod": "$t(common:wordMatchMethods.partial)",
      "removeFilterMethod": "$t(common:filterMethods.remove)",
      "substituteFilterMethod": "$t(common:filterMethods.substitute)",
      "wholeMatchMethod": "$t(common:wordMatchMethods.whole)"
    },
    "values": {
      "censorFixedLengthOriginal": "Original"
    }
  },
  "statsPage": {
    "buttons": {
      "exportStats": "$t(common:buttons.export)",
      "importStats": "$t(common:buttons.import)",
      "removeLessUsedWords": "REMOVE WORDS",
      "resetStats": "$t(common:buttons.reset)"
    },
    "headers": {
      "stats": "$t(options:tabs.stats)",
      "summary": "Summary",
      "wordsFiltered": "Words Filtered"
    },
    "labels": {
      "collectStats": "Collect stats",
      "totalWordsFiltered": "Total words filtered",
      "trackingSince": "Tracking since"
    },
    "messages": {
      "confirmImportStats": "Are you sure you want to overwrite your statistics?",
      "confirmRemoveLessUsedWords_one": "Are you sure you want to remove {{count}} word?",
      "confirmRemoveLessUsedWords_other": "Are you sure you want to remove {{count}} words?",
      "confirmRemoveLessUsedWordsNone": "All words have been filtered more times than the provided number.",
      "confirmResetStats": "Are you sure you want to reset filter statistics?",
      "importFailed": "Failed to import stats.",
      "importInvalid": "Invalid stats file.",
      "loadFailed": "Failed to populate stats.",
      "prepareLessUsedWordsError": "Error while preparing less-used words.",
      "resetFailed": "Failed to reset stats."
    },
    "notes": {
      "collectStats": "(Only stored locally)",
      "confirmRemoveLessUsedWordsNone": "Try increasing the number to include more words.",
      "removeLessUsedWords": "Remove words filtered fewer times than"
    },
    "tableHeaders": {
      "summaryTotal": "Total",
      "summaryWords": "Word"
    },
    "validations": {
      "lessUsedWordsInvalid": "Enter a positive whole number."
    }
  },
  "statusModal": {
    "buttons": {
      "ok": "$t(common:buttons.ok)"
    },
    "headers": {
      "error": "Error",
      "status": "Status",
      "warning": "Warning"
    },
    "messages": {
      "error": "The requested action failed. Please try again or contact support.",
      "saveFailed": "Failed to save.",
      "saveOptionsFailed": "Settings not saved! Please try again.",
      "status": "Status updated.",
      "warning": "Invalid input."
    }
  },
  "testsPage": {
    "headers": {
      "test": "$t(options:tabs.test)",
      "filtered": "Filtered"
    },
    "notes": {
      "filteredTextPlaceholder": "Enter some text above to test the filter..."
    }
  },
  "tabs": {
    "bookmarklet": "Bookmarklet",
    "config": "Config",
    "domains": "Domains",
    "help": "Help",
    "lists": "Lists",
    "settings": "Settings",
    "stats": "Stats",
    "test": "Test",
    "words": "Words"
  },
  "wordsPage": {
    "buttons": {
      "openBulkWordEditor": "BULK EDITOR",
      "removeAllWords": "$t(common:buttons.removeAll)",
      "removeWord": "$t(common:buttons.remove)",
      "saveWord": "$t(common:buttons.save)"
    },
    "headers": {
      "includeInWordlists": "Include in Wordlists",
      "matchMethod": "Match Method",
      "other": "Other",
      "substitution": "Substitution",
      "wordPhrase": "Word/Phrase",
      "wordsAndPhrases": "Words & Phrases"
    },
    "labels": {
      "caseSensitive": "Case-sensitive",
      "filterWordList": "Filter list",
      "matchRepeated": "Match repeated characters",
      "matchSeparators": "Match separators"
    },
    "messages": {
      "removeFailed": "Failed to remove word '{{word}}'.",
      "updateFailed": "Failed to update word '{{word}}'."
    },
    "notes": {
      "matchExact": "(dog: *** in the doghouse)",
      "matchPartial": "(dog: *** in the ***house)",
      "matchRegex": "(Regular expression)",
      "matchRepeated": "(dog: dddoooggg)",
      "matchSeparators": "([-_ ] dog matches: D-o _g)",
      "matchWhole": "(dog: *** in the ********)"
    },
    "options": {
      "exactMatchMethod": "$t(common:wordMatchMethods.exact)",
      "partialMatchMethod": "$t(common:wordMatchMethods.partial)",
      "regexMatchMethod": "$t(common:wordMatchMethods.regex)",
      "wholeMatchMethod": "$t(common:wordMatchMethods.whole)"
    },
    "validations": {
      "regexInvalid": "Invalid Regex.",
      "substitutionCollision": "Word and substitution must be different.",
      "substitutionContainsWord": "Substitution can't contain word (causes an endless loop).",
      "wordAlreadyListed": "'{{word}}' already in list."
    }
  },
  "validations": {
    "wordPhraseInvalid": "Please enter a valid word/phrase."
  },
  "values": {
    "addOrUpdateExistingOption": "Add, or update existing..."
  }
}
